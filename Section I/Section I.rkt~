;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |Section I|) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp") (lib "batch-io.rkt" "teachpack" "2htdp")) #f)))
(define WIDTH-OF-WORLD 200)
 
(define WHEEL-RADIUS 6)
(define WHEEL-DISTANCE (* WHEEL-RADIUS 10))

(define WHEEL
  (circle WHEEL-RADIUS "solid" "black"))

(define SPACE
  (rectangle (* WHEEL-RADIUS 2) 0  "solid" "black"))

(define BOTH-WHEELS
  (beside WHEEL SPACE WHEEL))

(define CAR
  (overlay/align/offset "middle" "baseline" BOTH-WHEELS 0 -5 (above
                                                              (rectangle (/ WHEEL-DISTANCE 2) (* WHEEL-RADIUS 1.2) "solid" "red")
                                                              (rectangle WHEEL-DISTANCE (* WHEEL-RADIUS 2)  "solid" "red" )
                                                              ))
  )

(define tree
  (underlay/xy (circle 10 "solid" "green")
               9 15
               (rectangle 2 20 "solid" "brown")))

(define BACKGROUND
  (place-image tree (- WIDTH-OF-WORLD 25) 25 (empty-scene WIDTH-OF-WORLD WHEEL-DISTANCE
                                                          )))

(define Y-CAR (* 2 (image-height CAR)))
(define X-CAR (image-width CAR))

; WorldState -> WorldState 
; moves the car by 3 pixels for every clock tick
; examples: 
;   given: 20, expect 23
;   given: 78, expect 81
(define (tock cw)
  (+ cw 3))

; WorldState -> Image
; places the car into the BACKGROUND scene,
; according to the given world state 
(define (render cw)
  (place-image CAR cw Y-CAR BACKGROUND))

; WorldState -> Boolean
; after each event, big-bang evaluates (end? cw) 
(define (end? cw)
  (cond [(>  cw (- WIDTH-OF-WORLD (* 0.5 X-CAR))) #true]
        [(<  cw (- WIDTH-OF-WORLD (* 0.5 X-CAR))) #false]    
        ))

; WorldState Number Number String -> WorldState
; places the car at x-mouse
; if the given me is "button-down" 
; given: 21 10 20 "enter"
; wanted: 21
; given: 42 10 20 "button-down"
; wanted: 10
; given: 42 10 20 "move"
; wanted: 42
(define (hyper x-position-of-car x-mouse y-mouse me)
  (cond
    [(string=? "button-down" me) x-mouse]
    [else x-position-of-car]))

; WorldState -> WorldState
; launches the program from some initial state 
(define (main ws)
  (big-bang ws
    [on-tick tock]
    [to-draw render]
    [on-mouse hyper]
    [stop-when end?]
    ))

; ---------------------------------------------

(define CAT ...)

(define CAT-2 ...)

(define CAT-WIDTH (* (image-width CAT) 4))

(define CAT-HEIGHT (image-height CAT))

(define CAT-BG
  (empty-scene CAT-WIDTH CAT-HEIGHT))

(define (cat-tock cw)
  (+ cw 3))

(define (render-cats ws)
  (cond [(odd? ws) (render-cat ws)]
        [(odd? ws)(render-cat-2 ws)])
  )

(define (render-cat ws)
  (place-image CAT ws (* 0.5 CAT-HEIGHT) CAT-BG
               ))
(define (render-cat-2 ws)
  (place-image CAT-2 ws (* 0.5 CAT-HEIGHT) CAT-BG
               ))

(define (cat-end? cw)
  (cond [(>  cw  (- CAT-WIDTH (/ CAT-WIDTH 8))) #true]
        [(<  cw  CAT-WIDTH) #false]    
        ))


(define (cat-prog ws)
  (big-bang ws
    [on-tick cat-tock]
    [to-draw render-cat]
    [stop-when cat-end?]
    ))
; -----------------------------------------------------
; 4 Intervals, Enumerations, and Itemizations
; -----------------------------------------------------

; Ex. 48
; Enter the definition of reward followed by (reward 18) into the definitions area of DrRacket and use the stepper to find out how DrRacket evaluates applications of the function.

(define (reward s)
  (cond
    [(<= 0 s 10) "bronze"]
    [(and (< 10 s) (<= s 20)) "silver"]
    [else "gold"]))

;(reward 18)

; Ex. 49 A cond expression is really just an expression and may therefore show up in the middle of another expression:
;(- 200 (cond [(> y 200) 0] [else y]))
; Use the stepper to evaluate the expression for y as 100 and 210.

;(- 200 (cond [(> 100 200) 0] [else 210]))

; Reformulate create-rocket-scene.v5 to use a nested expression; the resulting function mentions place-image only once.

(define WIDTH  100)
(define HEIGHT  60)
(define MTSCN  (empty-scene WIDTH HEIGHT))
(define ROCKET .)
(define ROCKET-CENTER-TO-TOP
  (- HEIGHT (/ (image-height ROCKET) 2)))

(define (create-rocket-scene.v5 h)
  (place-image ROCKET 50 
               (cond
                 [(<= h ROCKET-CENTER-TO-TOP) h]
                 [(> h ROCKET-CENTER-TO-TOP) ROCKET-CENTER-TO-TOP])
               MTSCN))
; Ex. 50.  If you copy and paste the above function definition into the definitions area of DrRacket and click RUN, DrRacket highlights two of the three cond lines. This coloring tells you that your test cases do not cover the full conditional. Add enough tests to make DrRacket happy.

; A TrafficLight is one of the following Strings:
; – "red"
; – "green"
; – "yellow"
; interpretation the three strings represent the three 
; possible states that a traffic light may assume

; TrafficLight -> TrafficLight
; yields the next state given current state s
(check-expect (traffic-light-next "red") "green")
(check-expect (traffic-light-next "green") "yellow")
(check-expect (traffic-light-next "yellow") "red")
(define (traffic-light-next s)
  (cond
    [(string=? "red" s) "green"]
    [(string=? "green" s) "yellow"]
    [(string=? "yellow" s) "red"]))

; Ex. 51 - Design a big-bang program that simulates a traffic light for a given duration. The program renders the state of a traffic light as a solid circle of the appropriate color, and it changes state on every clock tick. Hint Read the documentation for big-bang; there is a reason all these “words” are linked to their documentation. What is the most appropriate initial state? Ask your engineering friends.
