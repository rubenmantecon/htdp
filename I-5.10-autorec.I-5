;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname I-5) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "image.rkt" "teachpack" "2htdp") (lib "universe.rkt" "teachpack" "2htdp")) #f)))
(define-struct editor [pre post])
; An Editor is a structure:
;   (make-editor String String)
; interpretation (make-editor s t) describes an editor
; whose visible text is (string-append s t) with 
; the cursor displayed between s and t

; Exercise 83. Design the function render, which consumes an Editor and produces an image.

(define TEXTBOX (empty-scene 200 20))
(define CURSOR (rectangle 1 20 "solid" "red"))

; Editor -> Image
; Takes the values of an Editor and renders them as a textbox
(define (render e)
  (overlay/align "left" "center"
                 (text (string-append (editor-pre e) (editor-post e)) 16 "black")
                 TEXTBOX))

(check-expect (render (make-editor "hello" " world")) (overlay/align "left" "center"
                                                                     (text "hello world" 16 "black")
                                                                     (empty-scene 200 20)))
; Editor KeyEvent -> Editor
; Appends the 1String representation to Editor.Pre
(define (edit ed ke)
  (make-editor (cond
                 [(string=? ke "\b") (string-append (substring (editor-pre ed) 0 (- (string-length (editor-pre ed) 1))))]
                 [(or (string=? ke "\t") (string=? ke "\r")) (editor-pre ed)]
                 [(else (string-append (editor-pre ed) ke))]




                 ) (editor-post ed)))



(check-expect (edit (make-editor "a" "") "a") (make-editor "a" "a"))
(check-expect (edit (make-editor "a" " ") "a") (make-editor "aa" " "))
(check-expect (edit (make-editor "a" "b") " ") (make-editor "a " "b"))
(check-expect (edit (make-editor "a " "b ") " ") (make-editor "a " "b "))
(check-expect (edit (make-editor " a" "b") " ") (make-editor " a " "b"))
(check-expect (edit (make-editor " a" "b ") " ") (make-editor " a " "b "))
(check-expect (edit (make-editor "a" "b") "\b") (make-editor "" "b"))
(check-expect (edit (make-editor "a " "b") "\b") (make-editor "a" "b"))
(check-expect (edit (make-editor " a" "b") "\b") (make-editor " " "b"))
(check-expect (edit (make-editor "a" "b") " ") (make-editor "" "b"))



